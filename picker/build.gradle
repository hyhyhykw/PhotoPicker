apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.github.dcendents.android-maven' // 添加这个


group='com.github.hyhyhykw'	// 指定group，com.github.<用户名>
android {
    compileSdkVersion 28
    resourcePrefix "picker_"
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 42
        versionName "4.2"
        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
        defaultCacheImplementation = "SPARSE_ARRAY"
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"
    implementation "org.jetbrains.anko:anko-common:0.10.8"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.viewpager2:viewpager2:1.0.0-beta04"
    implementation 'androidx.recyclerview:recyclerview:1.0.0'


    api 'com.facebook.fresco:fresco:1.13.0'
    api 'com.facebook.fresco:animated-gif:1.13.0'
    api 'me.relex:photodraweeview:2.0.0'
//    api 'com.github.chrisbanes:PhotoView:2.3.0'
    api 'androidx.exifinterface:exifinterface:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'
//    api 'com.yanzhenjie.permission:x:2.0.1'
    api 'pub.devrel:easypermissions:3.0.0'
    implementation 'com.afollestad.material-dialogs:core:3.1.0'
}

//---------------------------------------------

// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs

    archiveClassifier.set('sources')
//    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}